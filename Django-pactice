1. 웹사이트 띄우기
     1-1. cmd를 이용해 웹사이트를 만들 가상환경 생성 
            --> python -m venve myenironment<가상환경 이름>
  
     1-2. myenvironment 파일 하위에 있는 Scripts로 이동
            --> C:\python-kdy\django\myenvironment\Scipts
            --> 가상환경 실행 --> activate.bat
            
     1-3. 서버를 구동할 프로젝트 생성
            --> myenvironment 가상환경 내에서 C:\python_kdy\django 파일로 이동 후
            --> django-admin startproject myproject 명령 시행 ( myproject라는 프로젝트 생성)
            
     1-4. 서버 구동
            --> C:\python_kdy\django\myproject --> manage.py 파일 있는 곳에서 실행
            --> python manage.py runserver ( 기본 8000번 포트로 서버 구동)
            --> (원하는 포트번호로 바꿀시) python manage.py runserver <포트번호> 
            
     1-5. 서버 종료
            --> CTRL + C
            
     1-6. 서버 구동 확인
            --> 인터넷 사이에서 주소창에 127.0.0.1:8000 입력
            
            
            
            
* 구동된 서버는
장고 개발 테스트 서버로써 경량의 웹 서버이다.
주로 개발 목적 및 테스트 용도로 사용이 되는 서버이기에.
실무로 쓰기 위해서는 엔진엑스 or 아파치 같은 웹서버를 사용해야한다.

------------------------------------------------------------------------

프로젝트 생성 후 생성되는 폴더 및 파일들 --> C:\python_kdy\django > 하위에 생성
              myenvironment
              myproject
                    manage.py (가장 자주 사용하는 파일 중 하나. 서버 구동 등에 쓰인다.)
                    myproejct 
                          - settings ( 프로젝트 내 환경구성 등 여러 설정 정보를 담고 있음.)
                          - urls.py ( URL 패턴 등 패스 관련 여러 정보를 담고있음 )
                           ( 일단 위 2개가 중요한 파일 --> 자주 사용되는 파일 이다.)
                           
-------------------------------------------------------------------------

2. superuser (수퍼유저) 생성 및 기본 테이블 생성 --> superuser (즉, 관리자) 
     2-1. superuser 생성
              --> C:\python_kdy\django\myproject 에서 
              --> python manage.py migrate ( 기본 테이블 생성 --> 생성이 안되어 있으면 superuser 생성이 안된다.)
              --> python manage.py createsuperuser 
              
     2-2. 관리자 모드 접속
              --> localhost:8000/admin 으로 접속
              --> 아이디, 비번 입력후 접속 하면 끝
            
--------------------------------------------------------------------------

3. django 학습을 위한 주요 개념들
     3-1. Framework (프레임워크)
              --> django는 파이썬으로 개발된 오픈 소스 웹 프레임워크.
              --> 기본적으로 'M(모델) - V(뷰) - C(컨트롤러)'  패턴을 따른다.
                      V (뷰) : 사용자에게 보여지는 페이지 라고 생각하면 된다.
                      C (컨트롤러) : 사용자의 요청에 따른, 적절한 V을 보여지게 해주는 역할
              --> 간단히 말해 M,V,C는 각각의 영역을 침범하지 않는 패턴이 있다.
        
        * Framework 장점
              --> 초보자라도 품질(Quality)좋은 웹사이트를 만들 수 있다.
              --> 유지보수 등을 위한 직원 및 개발팀의 충원이나 연속성이 비프레임워크에 비해서 상대적으로 보장된다.
        * Framework 단점
              --> 배우는 것이 어렵다.
              --> 규칙과 가이드에서 벗어나는 것을 대부분의 프레임워크가 허용하지 않는다.
              --> 모던한 개발방식이기에 기존의 전통적인 방식으로 개발된 웹사이트와 통합하기가 쉽지 않다. 새롭게 만드는 것이 더 효율.

     3-2. 가상환경
              --> 웹 개발 프로젝트를 진행할 때 독립된 환경을 구축해준다.
              --> 웹 개발 프로젝트 성격에 따라 프로젝트 마다 프로젝트에 사용되는 라이브러릴나 관련 버전들이 다를 수 있다.
              --> 가상환경 구축 툴이 여러 개 있는데 파이썬 내 모듈인 'venv' 모듈을 사용하여 아래처럼 구축한다,
                  --> python -m venv <가상환경이름>
                  --> (다른 방법) pip install vitualenv (가상 디렉토리 생성)
                                -> vitualenv mywebsite
                    
     3-3. Project와 App
              --> 기본적으로 프로젝트는 가장 큰 또는 최상위의 웹 개발 디렉토리(폴더)라고 생각하면 된다.
              --> 이 안에 여러개의 프로그램을 만들어 넣을 수 있는데 이를 'App(앱)'이라 부른다.
              --> 이런 여러 개의 앱들이 모여서 하나의 프로젝트가 되고 이는 곧 하나의 웹사이트가 된다.
              
              --> django 에서 프로젝트 생성 -> django-admin startproject <프로젝트명>
                              앱 생성 -> python manage.py startapp <앱명>
                              
     3-4. Model
              --> 모델은 곧 데이터(데이터베이스)
              --> 장고는 모델(Model)을 이용하여 데이터 및 데이터베이스 연동 작업을 처리한다고 생각.
              
              
-------------------------------------------------------------------------------

4. App 생성하기
     4-1. Project vs App 차이
              --> project 는 큰 개념이고 app은 그 하위의 작은개념.
              --> 큰 프로젝트 안에서 필요한 프로그램들의 단위가 앱으로써 회원가입, 게시판, 설문조사 등의 앱이 있을 수 있음.
              --> 즉, 앱을 프로젝트 내에서 특정한 기능을 수행하는 프로그램 단위.
              
     4-2. 앱 생성 명령어
              --> 가상모드로 진입
              --> C:\python_kdy\django\myproject > py manage.py startapp onememos
    
     4-3. onememos 폴더 생성 및 파일들
              --> migrations(폴더)
              --> admin.py
              --> views.py
              --> models.py
                    등등.. 폴더나 파일들이 자동으로 생성
              --> urls.py (별도로 수동 생성해줘야 하는 파일. 최상위 URLconf 와의 연결을 위하여 필요. 최상위 urls.py 파일에 있음)
                    --> copy con urls.py      
     4-4. 최상위 urls.py --> ulpatterns --> 앱패스 추가
              --> path('onememos/', include('onememos.urls')),  # include 임포트 했는지 확인!!! 안하면 서버 구동 시 에러!!! 
              --> path('admin/', admin.site.urls),
                           
     4-5. include()함수
              --> 다른 URLconf 패스들을 참조할 수 있도록 해주는 함수. 앱 구동 및 연결 시 중요한 역할을 하는 함수.
              
-----------------------------------------------------------------------------------

5. hellow World 출력 ( 텍스트 에디터 이용)
     5-1. views.py파일 실행
             --> from django.shortcuts import render
                 from django.http import HttpResponse

                 def index(request):
                 return HttpResponse('Hello World!!')
                 
     5-2. urls.py 
             --> from django.urls import path
                 from . import views
                 
                 urlpatterns = [
                      path('', views.index, name = 'index')    # path('', -> 이렇게 입력해도 urls.py가 onememos안에 있는 파일이기에
                 ]                                                           주소창에 localhost:8000/onememos/ 로 입력한 거랑 똑같다.
                                                               # views.index --> views파일 안에있는 index 모듈을 참고하겠다.
    
     5-3. 프로젝트 파일의 urls.py
            --> myproject의 urls.py을 연다.
            --> from django.contrib import admin
                from django.urls import path, include

                urlpatterns = [
                         path('onememos/', include('onememos.urls')),
                         path('admin/', admin.site.urls),
                ]

-----------------------------------------------------------------------------------

6. 테이블 생성하기 ( 위의 py manage.py migrate 로 생성된 기본 테이블이 아닌 별도로 생성)
    6-1. onememos의 model.py 를 텍스트에디터에 실행
      
             * 왜 이름이 모델(model)일까?
                      1) 일상 용어에서 사람들이 뭔가를 대표하고 샘플표본으로 받아들일 만한 단어(model, specimen(표본) 등..) 이기 떄문
                      2) 예를들어, 후진국 또는 개발도상국에서 경제성장을 위하여 롤 모델로 삼을만한 선진국이 어디일까? --> 대한민국(모델)
                      3) 즉, 어떤 프로그램(App)을 만들 때, 데이터가 저장되고 관리되는 것이 필요한데 
                             이러한 걸 처리하기 위한 모델(표본)이 필요하다.
                      4) 이러한 모델 --> 데이터 모델 or 데이터베이스 모델
                    
              * 최소한의 필요한 것 위주로 데이터 모델을 만든다면?
                     1. 데이터 모델을 어떤식으로 만들지 고민
                        idx (정수형)
                        memo_text (문자형)
                        published_date (날짜형)
                     2. 파이썬의 클래스(=테이블 생성)코드를 작성
                     3. migrate 명령으로 테이블을 생성
            
            --> from django.db import models
                                                                                   # idx는 고유번호(PK)이기에 Django에서 알아서 생성해주기에
                class Memo(models.Model):                                            굳이 해줄 필요가 없다.
                      memo_text = models.CharField(max_length = 200)                
                      published_date = models.DateTimeField(auto_now_add = True)   # Memo로 테이블 생성 완료  
    
    6-2. onememos의 admin.py 에다가 Memo를 등록       
            --> 작성후 반영을 위해서 Admin사이트에 반영
                admin.py 열고 추가 작성
                
            --> from django.contrib import admin
                from onememos.models import Memo
                
                admin.site.register(Memo)       
            
    6-3. 최상위 폴더인 myproject의 settings.py 에 onememos를 등록 해주기
            --> myproject의 settings.py 에서 INSTALLED_APPS = 에
                'onememos.apps.OnememosConfig' 추가
            --> cmd의 가상환경 모드로 들어간다. 
            --> C:\python_kdy\django\myproject > python manage.py makemigrations
            --> onememos 하위의 migrations 폴더안에 0001_initial.py 라는 파일이 생성된걸 볼 수 있다.
                    
                    * 만약 Memo 를 수정한 뒤에 다시 makemigrations 을 한다면
                      0002_intial.py 라고 새로운 파일이 생긴다.
                      그 뒤에도 수정을 하면 0003 ,0004... 이런식으로 적용이 된다.
    6-4. 최종적으로 적용하기
            --> C:\python_kdy\django\myproject > python manage.py migrate
            
(최종 과정 정리)
   1. 내가 만든 onememeos의 models.py 에서 Memo 만들기
   2. admin.py 에서 Memo를 등록하기
   3. migrate하기
      3-1. 최상위 폴더의 settings.py 에 onememos의 app 등록
      3-2. python manage.py makemigrations
      3-3. python manage.py migrate

-------------------------------------------------------------------------------------

7. onememos의 views.py에서 함수를 만들어줄때 def **(request): 에서 request란 뭘까?
      1. 하나의 폼에서 정보를 입력하고 서버의 특정주소로 send해준다.
      2. 보내는 방식이 2가지 방식으로 보낸다.
          2-1. POST , GET, COOKIE 방식
      3. 폼에서 위의 2가지 방식 중 하나의 방식을 통해 요청하면
         onememos의 urls.py 에서는 views.함수와 서버를 request객체를 통해서 연결시켜준다.
         
         * 즉, request객체는 사용자가 폼 페이지를 통해서 입력한 폼 데이터 값들을 받는다.   
      
************ Get vs Post *******************
     기본개념
            - Get 과 Post는 HTTP 프로토콜을 통해서 서버에 어떤 값을 전달할 때 사용하는 방식의 종류.
     기본차이
            - URL에 파라미터 값으로 데이터를 전달하면 Get방식 ex) localhost:8000/onememos/createMemo/?memoContent=대한민국
            - Post방식은 URL에 파라미터 정보가 보이지 않는다. ex) localhost:8000/onememos/createMemo/
            - 그 이유는 데이터가 Request Body에 포함되서 전달되기 때문에 파라미터가 노출되지 않는다.
     Get 방식과 Post 방식의 장단점
         * Get 
            - 조회(검색)이용시 많이 사용.
            - 캐시가 남기때문에 속도적으로는 Post 방식보다 좋다.
            - URL에 파라미터 정보가 노출되기에 보안적인 측면에서는 좋지 않다.
         * Post     
            - 입력(생성), 수정, 삭제시 많이 사용.
            - URL 에는 정보를 담을 수 있는 한계가 있다. 그런 경우 Post 방식 사용.
            - SSL 사용 시 높은 보안 수준을 적용할 수 있음.
            - 바이너리 데이터도 전달이 가능하기에 파일 업로드 등을 처리하기 편리하다.
            - 캐시가 남지 않기에 속도적으로는 Get방식보다 떨어진다.
***********************************************

      7-1. request.GET 이용하기 (GET 방식)
            --> onememos의 views.py 에서 
            -->def createMemo(request):
                  memoContent = request.GET['memoContent']    # 사용자가 ?memoContent= 로 입력한 정보를 출력한다.
                  return HttpResponse('Create Memo =' + memoContent)
            --> 웹 주소창에 localhost:8000/onememos/createMemo/?memoContent=대한민국 입력
                                       
-----------------------------------------------------------------------------------------

8. render 함수
       * 우리가 만든 Template파일(~.html 파일)을 return 해줌.
       * render함수와 template파일의 관계
            -> 웹사이트 개발 시 파이썬 코드와 데이터를 템플릿 파일로 만들어주는 함수. (쉽게 말해 HTML로 변환해서 적용해주는 함수)
            -> 결국 리턴은 HTML 파일로 리턴.
            -> 이렇게 HTML 파일로 리턴한 것을 --> 템플릿(Template) 또는 템플릿 파일
            -> 그러나 템플릿 파일이 HTML 파일은 아니다.
            -> 이러한 템플릿 파일은 장고 프레임원크 전용 파일의 개념.

       * 템플릿 폴더 만들기
            - 첫번째 : 프로젝트 루트 폴더에 templates 폴더를 만들어서 사용 --> settings.py -->  템플릿 경로 추가하여 사용.
            - 두번쨰 : 생성한 앱(App)쪽 바로 하위에다가 --> templates 폴더를 만들어서 사용 --> 앱별로 템플릿 사용이 가능.
            - 정리하면, 장고는 템플릿 폴더를 인식하는 방식이 여러 가지 이다.
            - 즉, onememos 앱의 경우 하위에 templates폴더 생성하면 별다른 설정없이 바로 템플릿 디렉토리로 인식.
            - 서버 재시작 해주어야 된다. ( py manage.py runserver)
            
-----------------------------------------------------------------------------------------

9. template 폴더 만들기
      9-1. onememos폴더에서 templates 폴더 만들기 
      9-2. templates폴더에 들어가서 main.html 만들기
      9-3. 텍스트 에디터에서 만들어놓은 main.html 파일 열기 
            --> onememos 메인페이지 템플릿    입력
      9-4. onememos의 views.py 에서
            --> def main(request):
                   return render(request, 'main.html')   # 이미 urls.py 에서 path를 통해 onememos/ 가 요청이 되었기 때문에 그냥 main.html 만 적어도 된다.
      9-5.  서버 재시작 후 웹주소창에 localhost:8000/onememos 입력   
            
------------------------------------------------------------------------------------------

10. 내가만든 웹의 관리자 페이지에서 위에서 만든 Memos에 있는 Memo의 제목들이 입력한 걸로 나오게 하는 방법
      10-1. onememos폴더의 models.py 에서
            --> class Memo(models.Model):
                  memo_text = models.CharField(max_length = 200) # 최대 글자 200자로 설정
                  published_date = models.DateTimeField(auto_now_add = True) # 자동으로 날짜가 설정
    
                  def __str__(self):
                       return self.memo_text
                       
-------------------------------------------------------------------------------------------

11. 뷰페이지 템플릿 만들기(1) - CMD 명령 프롬프트에서 DB 조작
      11-1. https://www.sqlite.org/download.html 여기서 관련 툴인 sqlite-tools-win32-x86- zip 다운로드
      11-2. 압축을 푼후 sqlite3.exe 실행파일을 db.sqlite3 가 있는 폴더안에 복붙한다.
            --> 이렇게 안하면 cmd 에 py manage.py dbshell 을 치면 오류가 난다.
      
      11-3. 위의 다 한후 cmd로 돌아와서 sqlite3의 DB 실행
            --> py manage.py dbshell
      11-4. 여기서 .table을 쳐보면 현재 있는 테이블의 이름들을 확인할 수 있다.
            --> 위에서 만든 Memo테이블은 사실 이름이 onememos_memo 로 되어있는걸 확인할 수 있다!! 주의하자
      11-5. onememos_memo 테이블 실행
            --> select * from onememos_memo;  
      11-6. Memo 에 적어놓은 글 바꾸기
            --> UPDATE onememos_memo SET memo_text = '환영합니다. 대한민국~' WHERE id = 1;
            
---------------------------------------------------------------------------------------------

12. 뷰페이지 템플릿 만들기(2) - Form 작성 및 DB 입력과 출력1
      12-1. Form은 POST방식이기에 views.py 에서 POST로 객체를 불러오자
            --> def createMemo(request):
                    memoContent = request.POST['memoContent']
    
                    return HttpResponse('Create Memo =' + memoContent)
      12-2. html파일에서 Form을 작성 해보자
-->
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>Memo Write Form</title>
        <style>
            form > label {
                display:inline-block;
                width: 120px;
            }
            form > input {
                padding:4px;
                margin-bottom:4px;
            }
        </style>
    </head>
    <body>
        <h1>Onememo Form</h1>
        <form action="http://localhost:8000/onememos/createMemo" method="POST" id="memoWriteForm">
            <label for="memo">한 줄 메모 입력</label>
            <input type="text" autocomplete="off" id="memo" name="memoContent" size="50" placeholder="한 줄 메모 내용을 작성하세요!">
        </form>
        <div>
            <button type="submit" form="memoWriteForm">한 줄 메모 등록하기</button>
        </div> 
    </body>
</html>


      * 이렇게 한뒤에 웹을 실행시켜주고 만든 Form 에 메모를 입력하고 보내면 CSRF 오류가 뜰 것이다.
          CSRF : F가 forgery이다. 즉 요청을 가짜로 보냈다는 말.
                 특정 사용자가 마치 접속하여 요청값을 보낸 것처럼 글 작성.
                 즉, 위조된(가짜의) 요청 액션(action)을 보내 악의적으로 요청을 이용하는 행위 이다.
          장고에서는 이러한 행위를 위한 대비책으로
          토큰을 이용한다. -> csrf_token
          csrf_token의 발급은 값이 매번 변경이 된다. -> 전송된 토큰을 통해 뷰가 호출되기 전 유효성 검증.
          방법: POST방식을 사용하는 템플릿 form태그 쪽에 {% csrf_token %} 작성
         -->  <form action="http://localhost:8000/onememos/createMemo" method="POST" id="memoWriteForm">
              {% csrf_token %} 
              이라고 치면 된다.
              
--------------------------------------------------------------------------------------------

13. 데이터 베이스 연동
     13-1. views.py 파일에서 Memo 데이터베이스의 memo_text 를 연동 
         --> def createMemo(request):
                memoContent = request.POST['memoContent']
    
                # DB 입력
                article = Memo(memo_text = memoContent)
                article.save()
               
                return HttpResponse('CreateMemo =' + memoContent)
     13-2. localhost:8000/onememos 에 입력을 하면 Memo에 입력한 정보가 저장이 되어진다.
     
---------------------------------------------------------------------------------------------

14. 리스트뷰 만들기1 - redirect, reverse
     14-1. 일단 HttpResponseRedirect, reverse 임포트 필요
         --> from django.http import HttpResponse, HttpResponseRedirect
             from django.urls import reverse
           
           * redirect() 란?
               - view 페이지 등에서 특정 로직 수행 후 다시 특정 url로 이동시키고자 할 때 사용.
           * reverse() 함수란?
               - 단어 뜻에서도 알 수 있듯이 URL을 역으로 계산 --> Path가 변경되어도 --> URL을 외울 필요X
               - urls.py 에서 만든 urlpattern 들의 name을 사용.
               - 즉, name을 통해서 해당 name의 url을 반환.
               - 당연한 얘기지만 name정보가 틀리면 페이지 에러
               
         --> def createMemo(request):
                  memoContent = request.POST['memoContent']
                  return HttpResponseRedirect(reverse('main'))
    
     14-2. localhost:8000/onememos/ 에 입력을 하면 
          --> createMemos/ url로 가는게 아닌, 다시 localhost:8000/onememos/ 로 돌아온다.
          
--------------------------------------------------------------------------------------------
15. 리스트뷰 만들기2 - Memo.object.all() 메서드
     15-1. main 함수내에서 DB로 부터 전체 글 목록을 가져와서 템플릿 파일로 전달(변수 형태)
          --> 이때 all()메서드 사용 --> Memo.objects.all()
          --> def main(request):
                    lists = Memo.objects.all()
                    data = {'lists':lists}                   # 반드시 딕셔너리 형태로 만들어서 변수를 템플릿 파일로 전달
                    
                    return render(request, 'main.html', data)     
           
     15-2. main.html 에서 lists를 도출 
          --> </form>
              <div style="padding-top:50px">
                    <ul style="line-height:2em">
                          {% for article in lists %}
                              <li>
                                   <b>{{article.id}}.</b>
                                   {{article.memo_text}}
                                   <small style="color:blue">
                                   {{article.published_date|date:"y-m-d"}}      * Y : 년도 풀네임 M : 월 영문자 D : 요일 영문자 
                                   </small>    
                              </li>
                
                          {% endfor %}
                    </ul>
               </div>
            
            
            ** 템플릿 문법(태그) **
              1. {%   %}
                - 이러한 템플릿 태그를 이용하여 안쪽에 파이썬 문법을 사용. (반복문 or 조건문)
                - ex) for i in lists
                - 직접적인 딕셔너리 이름(data)을 사용하지 않고 -> 키(key)를 사용 -> lists
                - 즉, key(=lists) 이름을 통해서 value 값에 접근.
                
              2. {{   }}
                - 1번의 템플릿 태그가 반복 처리나 조건 처리 등을 위해서 사용한다면,
                - 2번의 템플릿 태그는 데이터 값을 화면에 출력할 때 사용.
                - 반복 처리 시 하나하나의 item(=articl, object) 항목에 들어있는 속성 값을 꺼내서 화면에 출력시키고자 할 때 사용.
            **********************
            
-------------------------------------------------------------------------------------            
            
            
            
            
                           
                           
                           
                           
                           
                           
                           
                           
                           
